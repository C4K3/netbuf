var searchIndex = {};
searchIndex["netbuf"] = {"doc":"This module currently includes single `Buf` struct for holding buffers. Comparing to `Vec` class buffer has different allocation policy and has a marker of consumed data (i.e. already processed by protocol parser or already written to socket)","items":[[3,"Buf","netbuf","A buffer object to be used for reading from network",null,null],[4,"RangeArgument","","Temporary type until the one in stdlib is made stable",null,null],[13,"RangeFrom","","",0,null],[13,"Range","","",0,null],[13,"RangeTo","","",0,null],[11,"new","","Create empty buffer. It has no preallocated size. The underlying memory chunk is always deallocated when there are no useful bytes in the buffer.",1,{"inputs":[],"output":{"name":"buf"}}],[11,"consume","","Mark the first `bytes` of the buffer as read. Basically it's shaving off bytes from the buffer, but does it efficiently. When there are no more bytes in the buffer it's deallocated.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove_range","","Allows removing an arbitrary range of bytes",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"capacity","","Capacity of the buffer. I.e. the bytes it is allocated for. Use for debugging or for calculating memory usage. Note it's not guaranteed that you can write `buf.capacity() - buf.len()` bytes without resize",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","Number of useful bytes in the buffer",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","If buffer is empty. Potentially a little bit faster than getting `len()`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"extend","","Extend buffer. Note unlike `Write::write()` and `read_from()` this method reserves as small as possible a chunk of memory. So it's inefficien to grow with this method.  You may use the Write trait to grow incrementally.",1,null],[11,"read_from","","Read some bytes from stream (object implementing `Read`) into buffer",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_max_from","","Reads no more than max bytes into buffer and returns boolean flag of whether max bytes are reached",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"r"}],"output":{"generics":["bool"],"name":"result"}}],[11,"write_to","","Write contents of buffer to the stream (object implementing the Write trait). We assume that stream is non-blocking, use `Write::write` (instead of `Write::write_all`) and return all errors to the caller (including `WouldBlock` or `Interrupted`).",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["usize"],"name":"result"}}],[11,"split_off","","Splits buffer into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buf"}}],[11,"get","","Returns the byte at the index, or `None` if the index is out of bounds.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the byte at the index, or `None` if the index is out of bounds.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",1,null],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"generics":["usize"],"name":"range"}],"output":{"name":"rangeargument"}}],[11,"from","","",0,{"inputs":[{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"rangeargument"}}],[11,"from","","",0,{"inputs":[{"generics":["usize"],"name":"rangeto"}],"output":{"name":"rangeargument"}}],[11,"from","","",0,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangeargument"}}]],"paths":[[4,"RangeArgument"],[3,"Buf"]]};
initSearch(searchIndex);
